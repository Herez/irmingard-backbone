IRMINGARD
=========
Irmingard is a patience card game. The goal of the game is to clear away all cards from the board to discard piles. At the moment it's single player only but I'd love to be able to play it simultaneously with my big sister.

How to play
-----------
Irmingard is played with two sets (104 cards in total) of four suits (♠, ♣, ♦, ♥) with card values from Ace, 2, 3, ... Queen, King - without Jokers. The goal of the game is to clear away all cards to discard piles, where cards are ordered by suit and ascending value (Aces first).
The game starts with a board filled with cards in columns of 1, 2, 3, 4, 5, 4, 3, 2, and 1 cards. The only cards on the board whose face you can see are the ones at the bottom of a column, all cards above them are flipped and blocked. You can rearrange cards by putting cards of a lower value below cards of a different colour. Example: 7 of hearts can go below 8 of spades or 8 of clubs.
At the beginning of the game, all cards that aren't on the board are in a stack, and all eight piles are empty. Once you have a flipped Ace it goes straight to one of the eight piles (2 sets of 4 suits, so we have 8 Aces in the game, each with a duplicate).
When no more moves are left, new open cards are put at the bottom of each pile. This continues until you've cleared the entire board or have run out of moves.

Technology
----------
Irmingard runs on Ruby on Rails 3.2

Why "Irmingard"?
----------------
All I can say is that it's named after a person.


Objects
=======

Stack
-----
The stack of shuffled and cards in your hand, you can only see their back.

Pile
----
Discard piles where all the cards land in the following order: ace, 2, 3, ..., queen, king
There's 8 of them, two per suit.

Column
------
There are 9 columns on the board. at the start of the game they're filled with 1, 2, 3, 4, 5, 4, 3, 2, and 1 cards (left to right). Only the last card of each column is open and movable.

Card
----
The usual pawns of this game.
104 in total:
 + 2 sets of cards
   - in 4 suits (hearts, diamonds, spades, clubs)
     * with values from 1 (ace), 2, 3, ... 10, 11 (jack), 12 (queen), 13 (king)


Jasmine Javascript Specs
========================
+ in your browser:
  `rails s`
  open localhost:3000/jasmine

+ headless:
  `guard-jasmine spec`


Callback Flow
=============

Problems
--------

+ Can't set a card's draggability directly in its render method because on rendering the card's Column hasn't been updated yet by Backbone Relational
    Cards Collection: 'add' callback, card's column is still: 4
    CardsShow: rendering ♥queen with column still set to: 4
    Column Model.handleAdd callback: only now has the card's column been updated to the new one: 0

  The card first gets added to the Card Collection Backbone Relational uses behind the scene. This add automatically triggers Marionette's render on the card - unfortunately, Backbone Relational hasn't updated the card's column value then.
  One way out of this could be to rerender the Card in the Column's handleAdd callback (con: double rendering). A better idea might be to leave everything as it is and only update the card's draggability in Column.handleAdd. Then simply bind the CardView to changes on draggability and set the HTML-attribute accordingly.
